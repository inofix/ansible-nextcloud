---
# tasks file for nextcloud
#TODO depend on a separate PHP installation role?
- name: Make sure the right group exists
  group:
    name: "{{ app__nextcloud__group }}"
    system: yes

- name: Make sure the right user exists
  user:
    name: "{{ app__nextcloud__user }}"
    group: "{{ app__nextcloud__group }}"
    system: yes

- name: Check whether it is not installed already
  stat:
    path: "{{ nextcloud__home }}"
  register: nextcloud_stat

- name: Download the package
  environment:
    http_proxy: "{{ http_proxy }}"
  get_url:
    checksum: "{{ nextcloud__checksum }}"
    dest: "{{ nextcloud__home }}.{{ default__nextcloud__archive }}"
    url: "{{ nextcloud__download_upstream }}"
    owner: "{{ app__nextcloud__user }}"
    group: "{{ app__nextcloud__group }}"
    mode: "0644"
  when: not nextcloud_stat.stat.exists

- name: Make sure there is no temporary unpacking directory around
  file:
    path: "{{ nextcloud__home }}-tmp"
    state: absent
  when: not nextcloud_stat.stat.exists

- name: Create the temporary unpacking directory
  file:
    path: "{{ nextcloud__home }}-tmp"
    state: directory
    mode: "0750"
    owner: "{{ app__nextcloud__user }}"
    group: "{{ app__nextcloud__group }}"
  when: not nextcloud_stat.stat.exists

- name: Unpack the archive (as 'nobody')
  unarchive:
    remote_src: yes
    creates: "{{ nextcloud__home }}/config/config.sample.php"
    dest: "{{ nextcloud__home }}-tmp"
    src: "{{ nextcloud__home }}.{{ default__nextcloud__archive }}"
  when: not nextcloud_stat.stat.exists

- name: Move the installation to its final destination
  shell: 'mv "{{ nextcloud__home }}-tmp/{{ nextcloud__name }}" "{{ nextcloud__home }}" && chown root:root "{{ nextcloud__home }}"'
  when: not nextcloud_stat.stat.exists

- name: Recursively change the owner to the php/webserver user for the installation
  file:
    path: "{{ nextcloud__home }}"
    owner: "{{ nextcloud__user }}"
    group: "{{ nextcloud__group }}"
    recurse: yes
  when: not nextcloud_stat.stat.exists

#TODO lets see if this works
- name: Change the ownership of the top level directory to the root user (allow changes only below)
  file:
    path: "{{ nextcloud__home }}"
    owner: "root"
    group: "root"
    mode: "0755"
    recurse: no
  when: not nextcloud_stat.stat.exists

- name: Clean up the temporary unpacking directory
  file:
    path: "{{ nextcloud__home }}-tmp"
    state: absent
  when: not nextcloud_stat.stat.exists

- name: Install the data dir
  file:
    state: directory
    path: '{{ nextcloud__data }}'
    mode: '0750'
    owner: '{{ nextcloud__user }}'
    group: '{{ nextcloud__group }}'

- name: Install scripts for setting the correct permissions for maintenance
  template:
    src: "nextcloud-prepare.sh.j2"
    dest: "{{ nextcloud__home }}/nextcloud-prepare-{{ item.0 }}.sh"
    mode: "0750"
    owner: "root"
    group: "root"
  vars:
    nextcloud_maintenance: "{{ item.1 }}"
  with_together:
    - [ "upgrade", "production" ]
    - [ true, false ]


