#!/bin/bash
##########################################################################
# This script was autogenerated by ansible from the template found
# in the https://galaxy.ansible.com/inofix/nextcloud role.
##########################################################################
{% if nextcloud_maintenance %}
# Run this script before upgrades to lock the server and ensure the config
{% else %}
# Run this script after maintenance activities to ensure the config
{% endif %}
# and permission settings are fine.
##########################################################################

nextcloud_home="{{ nextcloud__home }}"
nextcloud_config="{{ nextcloud_config }}"
nextcloud_data="{{ nextcloud__data }}"

php_user='{{ nextcloud__user }}'
php_group='{{ nextcloud__group }}'
root_user='root'
root_group='root'

if [ ! -f "${nextcloud_config}" ] ||
    [ ! -e "${nextcloud__data}" ] ; then
    echo "Error: Nextcloud was not installed correctly!"
    exit 1
fi

check_data=$( grep "^'datadirectory' " ${nextcloud_config} | cut -d"'" -f4 )
if [ "${nextcloud__data%/}" != "${check_data%/}" ] ; then
    echo "Error: Other data dir used than configured, please check manually"
    echo "       ${nextcloud__data%/} vs. ${check_data%/}"
    exit 1
fi

# make a backup of the current config and set the correct mode
{% if nextcloud_maintenance %}
cp "${nextcloud_config}" "${nextcloud_config}.upgrade.backup"
check_mode=$( grep "^'maintenance' " ${nextcloud_config} | cut -d"'" -f4 )
if [ "$check_mode" == "true" ] ; then
    echo "Warning: The server was already in maintenance mode"
else
    sed -i "s;^'maintenance' => false,;'maintenance' => true," "${nextcloud_config}"
fi
{% else %}
cp "${nextcloud_config}" "${nextcloud_config}.current.backup"
check_mode=$( grep "^'maintenance' " ${nextcloud_config} | cut -d"'" -f4 )
if [ "$check_mode" == "false" ] ; then
    echo "Warning: The server was already in production mode"
else
    sed -i "s;^'maintenance' => true,;'maintenance' => false," "${nextcloud_config}"
fi
{% endif %}

# other users do not need to read anything here..
find "${nextcloud_home}" -type f -print0 | xargs -0 chmod 0640
find "${nextcloud_home}" -type d -print0 | xargs -0 chmod 0750
find "${nextcloud_data}" -type f -print0 | xargs -0 chmod 0640
find "${nextcloud_data}" -type d -print0 | xargs -0 chmod 0750

# first be most restrictive
chown -R ${root_user}:${php_group} "${nextcloud_home}"

{% if (nextcloud_maintenance) %}
# protect the data during upgrades, just in case
chown -R ${root_user}:${php_group} "${nextcloud_data}"

# allow changes during upgrades
echo "TODO: Does really everything have to belong to the PHP User?"
own -R ${php_user}:${php_group} "${nextcloud_home}/*"
{% else %}
# allow installation of apps and themes
chown -R ${root_user}:${php_group} "${nextcloud_home}/3rdparty"
chown -R ${root_user}:${php_group} "${nextcloud_home}/apps"
chown -R ${root_user}:${php_group} "${nextcloud_home}/themes"
{% endif %}

# control webserver access policy files
if [ -f "${nextcloud_home}/.htaccess" ] ; then
    chown ${root_user}:${php_group} "${nextcloud_home}/.htaccess"
    chmod 0644 "${nextcloud_home}/.htaccess"
fi 
if [ -f "${nextcloud_data}/.htaccess" ] ; then
    chown ${root_user}:${php_group} "${nextcloud_data}/.htaccess"
    chmod 0644 "${nextcloud_data}/.htaccess"
fi 

{% if (nextcloud_maintenance) %}
echo "Now upgrade with e.g. the following instructions:"
echo " # cd ${nextcloud_home}"
echo " # sudo -u ${php_user} php occ upgrade"
echo " # ${0}"
{% else %}
echo "The server should be running:"
echo "Now test with your browser that everything is working as expected."
{% endif %}

